/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.82
 * Generated at: 2017-11-29 06:04:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import java.net.URL;
import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import javax.xml.parsers.*;

public final class GoogleGeocoder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\n");
      out.write("\tFile: Geocoder.jsp\n");
      out.write("\tGoogle Geocoder利用部分：入力から住所がUTF-8でくると仮定\n");
      out.write("-->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?sensor=false&key=AIzaSyBRLvMe1RfG45_tnZ9QXgxN7O5LZr1frbY\"></script>\n");
      out.write("<title>Google Geocoderを使ってみる</title>\n");
      out.write("</head>\n");
      out.write("<body bgcolor=\"lightYellow\" onload=\"initialize();\">\n");


    try { request.setCharacterEncoding("UTF-8"); }
    catch (UnsupportedEncodingException e){    e.printStackTrace(); }

    /* 以下の３つの文字列変数は、動的Webページで使用する */
    String[] address = new String[2];
    address[0] = request.getParameter("address1");
    address[1] = request.getParameter("address2");

    String[][] result = {{null, null},{null, null}};

    for(int k = 0; k < 2; k++){
      try{
            String t = "http://maps.googleapis.com/maps/api/geocode/xml?sensor=false&address=";
            String utf8 = URLEncoder.encode(address[k], "UTF-8");
            String s = t+utf8;
            URL url = new URL(s);
            InputStream in = url.openStream();
            
            /* XMLの処理 */
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            builder.setErrorHandler(new org.xml.sax.ErrorHandler() {/* エラー処理 */
                // 致命的なエラーは無視する
                public void fatalError(SAXParseException exception)    throws SAXException { }
                // パーズでのエラーは報告できるように準備しておく
                public void error(SAXParseException e) throws SAXParseException {
                    String s = "Error at " +e.getLineNumber() + " line.";
                    String se = e.getMessage();
                }
                // 警告情報を取得する
                public void warning(SAXParseException err) throws SAXParseException{
                    String se = err.getMessage();
                }
            });

            Document document = builder.parse(in);/* XML文書のパージング */
            NodeList nodes = null;/* 全体のDOM木のルート */
            nodes = document.getElementsByTagName("lat");/* 緯度 */
            result[k][0] = nodes.item(0).getFirstChild().getNodeValue();
            nodes = document.getElementsByTagName("lng");/* 経度 */
            result[k][1] = nodes.item(0).getFirstChild().getNodeValue();
           } catch (DOMException e){/* DOM木のエラー */
            out.println("Error DOM: " + e.getMessage());
           } catch (SAXParseException e) {/* XMLのパージングのエラー */
            out.println(e.getMessage()    +" at line "+e.getLineNumber()
                +", column "+e.getColumnNumber());
        } catch (SAXException e ) {
            out.println("Error Parsing: " + e.getMessage());
        } catch (ParserConfigurationException e ) {
            out.println("Error DocumentBuilder: " + e.getMessage());
        } catch(IOException e){
            e.printStackTrace();
        }
    }
    
    // 以下計算処理

    //２座標の測地線距離を求める関数
    double x_lad = Double.parseDouble(result[0][0]);  // 座標1の緯度
    double x_lng = Double.parseDouble(result[0][1]);  // 座標1の経度
    double y_lad = Double.parseDouble(result[1][0]);  // 座標2の緯度
    double y_lng = Double.parseDouble(result[1][1]);  // 座標2の経度

    double R = 6371;    // 地球の半径の近似
    
    double delta_lad = Math.toRadians(Math.abs(x_lad - y_lad));   // 2点の緯度の差のラジアン
    double delta_lng = Math.toRadians(Math.abs(x_lng - y_lng));   // 2点の経度の差のラジアン
    double delta_1 = Math.toRadians(x_lad);                       // 座標1の緯度のラジアン
    double delta_2 = Math.toRadians(y_lad);                       // 座標2の緯度のラジアン
    
    double a = Math.pow(Math.sin(delta_lad/2), 2)
              + Math.cos(delta_1) * Math.cos(delta_2) * Math.pow(Math.sin(delta_lng/2), 2);
    
    double sita = 2 * Math.atan2(Math.sqrt(Math.abs(a)), Math.sqrt(Math.abs(1-a)));

    double distance = R * sita;   // 2地点間の距離



      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Google Geocoderで2地点間の距離を求める</title>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<center>\n");
      out.write("<h3>Google Geocoderを使ってみる</h3>\n");
      out.write("<hr>\n");
      out.write("<br>\n");
      out.write("<br>\n");
      out.write("第1の住所： ");
      out.print(address[0]);
      out.write("\n");
      out.write("<table border=\"1\">\n");
      out.write("  <tr>\n");
      out.write("    <td>緯度</td>\n");
      out.write("    <td>経度</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr>\n");
      out.write("    <td>");
      out.print(result[0][0]);
      out.write("</td>\n");
      out.write("    <td>");
      out.print(result[0][1]);
      out.write("</td>\n");
      out.write("  </tr>\n");
      out.write("</table>\n");
      out.write("<br>\n");
      out.write("第2の住所： ");
      out.print(address[1]);
      out.write("\n");
      out.write("<table border=\"1\">\n");
      out.write("  <tr>\n");
      out.write("    <td>緯度</td>\n");
      out.write("    <td>経度</td>\n");
      out.write("  </tr>\n");
      out.write("  <tr>\n");
      out.write("    <td>");
      out.print(result[1][0]);
      out.write("</td>\n");
      out.write("    <td>");
      out.print(result[1][1]);
      out.write("</td>\n");
      out.write("  </tr>\n");
      out.write("</table>\n");
      out.write("<br><br>\n");
      out.write("\n");
      out.write("距離：");
      out.print(distance);
      out.write(" km\n");
      out.write("<div id=\"map_canvas\" style=\"width:50%; height:50%;\">\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write(" function initialize() {\n");
      out.write("  var latlng1 = new google.maps.LatLng(\"");
      out.print(result[0][0]);
      out.write("\", \"");
      out.print(result[0][1]);
      out.write("\"); // 1箇所目 緯度・経度\n");
      out.write("  var latlng2 = new google.maps.LatLng(\"");
      out.print(result[1][0]);
      out.write("\", \"");
      out.print(result[1][1]);
      out.write("\"); // 2箇所目 緯度・経度\n");
      out.write("  var myOptions = {\n");
      out.write("   zoom: 5, //拡大倍率\n");
      out.write("   center: latlng1,\n");
      out.write("   mapTypeId: google.maps.MapTypeId.ROADMAP //地図の種類\n");
      out.write("  };\n");
      out.write("  var map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions); //地図を表示\n");
      out.write("  //地図上にマーカーを配置する\n");
      out.write("  var marker2 = new google.maps.Marker({\n");
      out.write("    position : latlng1, //緯度・経度\n");
      out.write("    map : map          //表示する地図\n");
      out.write("  });\n");
      out.write("  var marker2 = new google.maps.Marker({\n");
      out.write("    position : latlng2, //緯度・経度\n");
      out.write("    map : map          //表示する地図\n");
      out.write("  });\n");
      out.write("\n");
      out.write(" }\n");
      out.write("</script>\n");
      out.write("</div>\n");
      out.write("</center>\n");
      out.write("<hr>\n");
      out.write("<div align=\"right\">\n");
      out.write("<a href=\"index.jsp\">戻る    </a>\n");
      out.write("</div>\n");
      out.write("<br>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
